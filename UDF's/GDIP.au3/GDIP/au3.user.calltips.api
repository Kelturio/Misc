_GDIPlus_BitmapCreateFromFileICM ($sFileName)  Creates a Bitmap object based on an image file. This function uses ICM (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromGdiDib ($tBitmapInfo, $pBitmapData)  Creates a Bitmap object based on a $tagBITMAPINFO structure and an array of pixel data (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromHICON ($hIcon)  Creates a  Bitmap object based on an icon (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromResource ($hInst, $vResourceName)  Creates a  Bitmap object based on an icon (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromScan0 ($iWidth, $iHeight[, $iStride = 0[, $iPixelFormat = 0x0026200A[, $pScan0 = 0]]])  Creates a Bitmap object based on an array of bytes along with size and format information (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromStream ($pStream)  Creates a Bitmap object based on an IStream COM interface (required: #include <GDIP.au3>)
_GDIPlus_BitmapCreateFromStreamICM ($pStream)  Creates a Bitmap object based on an IStream COM interface. This function uses ICM (required: #include <GDIP.au3>)
_GDIPlus_BitmapGetPixel ($hBitmap, $iX, $iY)  Gets the color of a specified pixel in this bitmap (required: #include <GDIP.au3>)
_GDIPlus_BitmapSetPixel ($hBitmap, $iX, $iY, $iARGB)  Sets the color of a specified pixel in this bitmap (required: #include <GDIP.au3>)
_GDIPlus_BitmapSetResolution ($hBitmap, $nDpiX, $nDpiY)  Sets the resolution of this Bitmap object (required: #include <GDIP.au3>)
_GDIPlus_HICONCreateFromBitmap ($hBitmap)  Creates an icon handle from a bitmap object (required: #include <GDIP.au3>)
_GDIPlus_CachedBitmapCreate ($hBitmap, $hGraphics)  Creates a CachedBitmap object based on a Bitmap object and a Graphics object. The cached bitmap takes the (required: #include <GDIP.au3>)
_GDIPlus_CachedBitmapDispose ($hCachedBitmap)  Release a CachedBitmap object (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreate ()  Creates and initializes an identity color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreateGrayScale ()  Creates and initializes a gray-scaling color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreateNegative ()  Creates and initializes a negative color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreateSaturation ($nSat)  Creates and initializes a saturation color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreateScale ($nRed, $nGreen, $nBlue[, $nAlpha = 1])  Creates and initializes a scaling color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixCreateTranslate ($nRed, $nGreen, $nBlue[, $nAlpha = 0])  Creates and initializes a translation color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixInitHue (ByRef $tPreHueCM, ByRef $tCMPostHue)  Initializes pre- and post-hue color matrices (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixMultiply (ByRef $tCM1, $tCM2[, $iOrder = 0])  Multiplies a color matrix by another color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixRotateBlue (ByRef $tCM, $nPhi[, $iOrder = 0])  Rotates a color matrix around the blue axis (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixRotateColor (ByRef $tCM, $nPhi, $iX, $iY[, $iOrder = 0])  Updates a color matrix by the product of itself and a rotation color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixRotateGreen (ByRef $tCM, $nPhi[, $iOrder = 0])  Rotates a color matrix around the green axis (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixRotateHue (ByRef $tCM, $tPreHueCM, $tPostHueCM, $nPhi)  Rotates a color matrix around the grey matrix axis (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixRotateRed (ByRef $tCM, $nPhi[, $iOrder = 0])  Rotates a color matrix around the red axis (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixScale (ByRef $tCM, $nScaleRed, $nScaleGreen, $nScaleBlue, $nScaleAlpha[, $iOrder = 0])  Updatess a color matrix by the product of itself and a scaling color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixSetSaturation (ByRef $tCM, $nSat[, $iOrder = 0])  Updates a color matrix by the product of itself and a saturation color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixShearBlue (ByRef $tCM, $nRed, $nGreen[, $iOrder = 0])  Increases or decreases the blue component of a color by an amount proportional to the red and the green (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixShearColor (ByRef $tCM, $iX, $iY1, $nD1, $iY2, $nD2[, $iOrder = 0])  Updates a color matrix by the product of itself and a shearing color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixShearGreen (ByRef $tCM, $nRed, $nBlue[, $iOrder = 0])  Increases or decreases the green component of a color by an amount proportional to the red and the blue (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixShearRed (ByRef $tCM, $nGreen, $nBlue[, $iOrder = 0])  Increases or decreases the red component of a color by an amount proportional to the green and the blue (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixTranslate (ByRef $tCM, $nOffsetRed, $nOffsetGreen, $nOffsetBlue[, $nOffsetAlpha = 0[, $iOrder = 0]])  Updates a color matrix by the product of itself and a translation color matrix (required: #include <GDIP.au3>)
_GDIPlus_ColorMatrixTransformLuminance (ByRef $tCM[, $nRed = $GDIP_RLUM[, $nGreen = $GDIP_GLUM[, $nBlue = $GDIP_BLUM[, $nAlpha = 1]]]])  Updates a color matrix by the product of itself and a luminance transformation color matrix (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapClone ($hCustomLineCap)  Clones a CustomLineCap object (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapCreate ($hPathFill, $hPathStroke[, $iLineCap = 0], $nBaseInset = 0]])  Createss a CustomLineCap object (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetBaseCap ($hCustomLineCap)  Gets the style of the CustomLineCap base cap (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetBaseInset ($hCustomLineCap)  Gets the distance between the base cap to the start of the line (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetStrokeCaps ($hCustomLineCap)  Gets the end cap styles for both the start line cap and the end line cap (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetStrokeJoin ($hCustomLineCap)  Returns the style of line join used to join multiple lines in the same Path object (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetType ($hCustomLineCap)  Gets the type of a line cap object (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapGetWidthScale ($hCustomLineCap)  Gets the value of the scale width. This is the amount to scale the custom line cap relative to the width of (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapSetBaseCap ($hCustomLineCap, $iLineCap)  Sets the style of the CustomLineCap base cap (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapSetBaseInset ($hCustomLineCap, $nInset)  Sets the distance between the base cap to the start of the line (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapSetStrokeCaps ($hCustomLineCap, $iStartCap, $iEndCap)  Sets the distance between the base cap to the start of the line (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapSetStrokeJoin ($hCustomLineCap, $iLineJoin)  Sets the style of line join for the stroke. The line join specifies how two lines that intersect within the (required: #include <GDIP.au3>)
_GDIPlus_CustomLineCapSetWidthScale ($hCustomLineCap, $nWidthScale)  Sets the value of the scale width. This is the amount to scale the custom line cap relative to the width of (required: #include <GDIP.au3>)
_GDIPlus_FontClone ($hFont)  Clones a font (required: #include <GDIP.au3>)
_GDIPlus_FontCollectionCreate ()  Creates an InstalledFontCollection object which can then be used to enumerate fonts installed on the system (required: #include <GDIP.au3>)
_GDIPlus_FontCollectionGetFamilyCount ($hFontCollection)  Gets the number of font families contained in a font collection (required: #include <GDIP.au3>)
_GDIPlus_FontCollectionGetFamilyList ($hFontCollection)  Gets the font families contained in a font collection (required: #include <GDIP.au3>)
_GDIPlus_FontCreateFromDC ($hDC)  Creates a Font object based on the font object that is currently selected into a specified device context (required: #include <GDIP.au3>)
_GDIPlus_FontCreateFromLogfont ($hDC, $tLogFont[, $fUnicode = True])  Creates a Font object directly from a logical font (required: #include <GDIP.au3>)
_GDIPlus_FontGetFamily ($hFont)  Gets the font family on which a font is based (required: #include <GDIP.au3>)
_GDIPlus_FontGetHeight ($hFont, $hGraphics)  Gets the line spacing of a font in the current unit of a specified Graphics object (required: #include <GDIP.au3>)
_GDIPlus_FontGetHeightGivenDPI ($hFont[, $nDPI = 96])  Gets the line spacing, in pixels, of a font (required: #include <GDIP.au3>)
_GDIPlus_FontGetLogFont ($hFont, $hGraphics[, $fUnicode = True])  Gets the logical font of a font (required: #include <GDIP.au3>)
_GDIPlus_FontGetSize ($hFont)  Gets the font size (commonly called the em size) of a Font object (required: #include <GDIP.au3>)
_GDIPlus_FontGetStyle ($hFont)  Gets the style of a font's typeface (required: #include <GDIP.au3>)
_GDIPlus_FontGetUnit ($hFont)  Gets the unit of measure of a Font object (required: #include <GDIP.au3>)
_GDIPlus_PrivateCollectionAddFontFile ($hFontCollection, $sFileName)  Adds a font file to this private font collection (required: #include <GDIP.au3>)
_GDIPlus_PrivateCollectionAddMemoryFont ($hFontCollection, $pMemory, $iLength)  Adds a font that is contained in system memory (required: #include <GDIP.au3>)
_GDIPlus_PrivateCollectionCreate ()  Creates a PrivateFontCollection object (required: #include <GDIP.au3>)
_GDIPlus_PrivateFontCollectionDispose ($hFontCollection)  Releases a PrivateFontCollection object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyClone ($hFontFamily)  Clones a FontFamily object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyCreate2 ($sFamily[, $hCollection = 0])  Creates a FontFamily object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyCreateGenericMonospace ()  Creates a generic monospace typeface FontFamily object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyCreateGenericSansSerif ()  Creates a generic sans serif typeface FontFamily object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyCreateGenericSerif ()  Creates a generic serif typeface FontFamily object (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyGetCellAscent ($hFontFamily[, $iStyle = 0])  Gets the cell ascent, in design units, of a font family for the specified style or style combination (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyGetCellDescent ($hFontFamily[, $iStyle = 0])  Gets the cell descent, in design units, of a font family for the specified style or style combination (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyGetEmHeight ($hFontFamily[, $iStyle = 0])  Gets the size (commonly called em size or em height), in design units, of a font family (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyGetFamilyName ($hFontFamily[, $iLANGID = 0])  Gets the name of a font family (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyGetLineSpacing ($hFontFamily[, $iStyle = 0])  Gets the line spacing, in design units, of this font family for the specified style or style combination (required: #include <GDIP.au3>)
_GDIPlus_FontFamilyIsStyleAvailable ($hFontFamily, $iStyle)  Gets the line spacing, in design units, of this font family for the specified style or style combination (required: #include <GDIP.au3>)
_GDIPlus_CreateHalftonePalette ()  Gets a Windows halftone palette (required: #include <GDIP.au3>)
_GDIPlus_GraphicsBeginContainer ($hGraphics, $tRectFDst, $tRectFSrc[, $iUnit = 2])  Begins a new graphics container (required: #include <GDIP.au3>)
_GDIPlus_GraphicsBeginContainer2 ($hGraphics)  Begins a new graphics container (required: #include <GDIP.au3>)
_GDIPlus_GraphicsComment ($hGraphics, $pData, $iData)  Adds a text comment to an existing metafile (required: #include <GDIP.au3>)
_GDIPlus_GraphicsCreateFromHDC2 ($hDC, $hDevice)  Creates a Graphics object that is associated with a specified device context and a specified device (required: #include <GDIP.au3>)
_GDIPlus_GraphicsCreateFromHWNDICM ($hWnd)  Creates a Graphics object that is associated with a specified window. The function uses ICM (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawBeziers ($hGraphics, $aPoints[, $hPen = 0])  Draws a sequence of connected Bezier splines (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawCachedBitmap ($hGraphics, $hCachedBitmap, $iX, $iY)  Draws an image stored in a CachedBitmap object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawClosedCurve2 ($hGraphics, $aPoints, $nTension[, $hPen = 0])  Draws a closed cardinal spline (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawCurve2 ($hGraphics, $aPoints, $nTension[, $hPen = 0])  Draws a cardinal spline (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawCurve3 ($hGraphics, $aPoints, $iOffset, $iNumOfSegments, $nTension[, $hPen = 0])  Draws a cardinal spline (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawImagePointRect ($hGraphics, $hImage, $nX, $nY, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight[, $iUnit = 2])  Draws an image (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawImagePointsRect ($hGraphics, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight[, $iUnit = 2[, $hImageAttributes = 0]])  Draws an image (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawImageRectRectIA ($hGraphics, $hImage, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight, $nDstX, $nDstY, $nDstWidth, $nDstHeight[, $hImageAttributes = 0[, $iUnit = 2]])  Draws an image (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawLines ($hGraphics, $aPoints[, $hPen = 0])  Draws a sequence of connected lines (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawPath ($hGraphics, $hPath[, $hPen = 0])  Draws a sequence of lines and curves defined by a GraphicsPath object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawRectangles ($hGraphics, $aRects[, $hPen = 0])  Draws a sequence of connected lines (required: #include <GDIP.au3>)
_GDIPlus_GraphicsEndContainer ($hGraphics, $iGraphicsContainer)  Closes a graphics container that was previously opened. (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFillClosedCurve2 ($hGraphics, $aPoints, $nTension[, $hBrush = 0[, $iFillMode = 0]])  Creates a closed cardinal spline from an array of points and uses a brush to fill the interior of the spline (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFillPath ($hGraphics, $hPath[, $hBrush = 0])  Uses a brush to fill the interior of a path (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFillPolygon2 ($hGraphics, $aPoints[, $hBrush = 0[, $iFillMode = 0]])  Uses a brush to fill the interior of a polygon (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFillRectangles ($hGraphics, $aRects[, $hBrush = 0])  Uses a brush to fill the interior of a sequence of rectangles (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFillRegion ($hGraphics, $hRegion[, $hBrush = 0])  Uses a brush to fill a specified region (required: #include <GDIP.au3>)
_GDIPlus_GraphicsFlush ($hGraphics[, $iIntention = 1])  Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetClip ($hGraphics, $hRegion)  Gets the clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetClipBounds ($hGraphics)  Gets a rectangle that encloses the clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetCompositingMode ($hGraphics)  Gets the compositing mode currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetCompositingQuality ($hGraphics)  Gets the compositing quality currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetDpiX ($hGraphics)  Gets the horizontal resolution, in dots per inch, of the display device associated with a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetDpiY ($hGraphics)  Gets the vertical resolution, in dots per inch, of the display device associated with a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetInterpolationMode ($hGraphics)  Gets the interpolation mode currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetNearestColor ($hGraphics, $iARGB)  Gets the nearest color to the color that is passed in (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetPageScale ($hGraphics)  Gets the scaling factor currently set for the page transformation of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetPageUnit ($hGraphics)  Gets the unit of measure currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetPixelOffsetMode ($hGraphics)  Gets the pixel offset mode currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetRenderingOrigin ($hGraphics)  Gets the rendering origin currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetTextContrast ($hGraphics)  Gets the contrast value currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetTextRenderingHint ($hGraphics)  Gets the text rendering mode currently set for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetTransform ($hGraphics, $hMatrix)  Gets the world transformation matrix of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsGetVisibleClipBounds ($hGraphics)  Gets the rectangle that encloses the visible clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsIsClipEmpty ($hGraphics)  Determines whether the clipping region of a Graphics object is empty (required: #include <GDIP.au3>)
_GDIPlus_GraphicsIsVisibleClipEmpty ($hGraphics)  Determines whether the visible clipping region of a Graphics object is empty (required: #include <GDIP.au3>)
_GDIPlus_GraphicsIsVisiblePoint ($hGraphics, $nX, $nY)  Determines whether the specified point is inside the visible clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsIsVisibleRect ($hGraphics, $nX, $nY, $nWidth, $nHeight)  Determines whether the specified rectangle intersects the visible clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsMultiplyTransform ($hGraphics, $hMatrix[, $iOrder = 0])  Updates a Graphics object's world transformation matrix with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_GraphicsResetClip ($hGraphics)  Sets the clipping region of a Graphics object to an infinite region (required: #include <GDIP.au3>)
_GDIPlus_GraphicsResetPageTransform ($hGraphics)  Resets the page transform matrix to the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_GraphicsResetTransform ($hGraphics)  Sets the world transformation matrix of a Graphics object to the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_GraphicsRestore ($hGraphics, $iState)  Restores the state of a Graphics object to the state stored by a previous call to the _GDIPlus_GraphicsSave (required: #include <GDIP.au3>)
_GDIPlus_GraphicsRotateTransform ($hGraphics, $nAngle[, $iOrder = 0])  Updates the world transformation matrix of a Graphics object with the product of itself and a rotation matrix (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSave ($hGraphics)  Saves the current state (transformations, clipping region, and quality settings) of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsScaleTransform ($hGraphics, $nScaleX, $nScaleY[, $iOrder = 0])  Updates a Graphics object's world transformation matrix with the product of itself and a scaling matrix (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetClipGraphics ($hGraphics, $hGraphicsSrc[, $iCombineMode = 0])  Updates the clipping region of a Graphics object to a region that is the combination of itself and the (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetClipHrgn ($hGraphics, $hRgn[, $iCombineMode = 0])  Updates the clipping region of a Graphics object to a region that is the combination of itself and a GDI (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetClipPath ($hGraphics, $hPath[, $iCombineMode = 0])  Updates the clipping region of this Graphics object to a region that is the combination of itself and the (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetClipRect ($hGraphics, $nX, $nY, $nWidth, $nHeight[, $iCombineMode = 0])  Updates the clipping region of a Graphics object to a region that is the combination of itself and a rectangle (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetClipRegion ($hGraphics, $hRegion[, $iCombineMode = 0])  Updates the clipping region of a Graphics object to a region that is the combination of itself and the region (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetCompositingMode ($hGraphics, $iCompositionMode)  Sets the compositing mode of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetCompositingQuality ($hGraphics, $iCompositionQuality)  Sets the compositing quality of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetInterpolationMode ($hGraphics, $iInterpolationMode)  Sets the interpolation mode of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetPageScale ($hGraphics, $nScale)  Sets the scaling factor for the page transformation of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetPageUnit ($hGraphics, $iUnit)  Sets the unit of measurement for a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetPixelOffsetMode ($hGraphics, $iPixelOffsetMode)  Sets the pixel offset mode of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetRenderingOrigin ($hGraphics, $iX, $iY)  Sets the rendering origin of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetTextContrast ($hGraphics, $iContrast)  Seets the contrast value of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsSetTextRenderingHint ($hGraphics, $iTextRenderingHint)  Seets the contrast value of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsTransformPoints ($hGraphics, $aPoints, $iCoordSpaceTo, $iCoordSpaceFrom)  Converts an array of points from one coordinate space to another (required: #include <GDIP.au3>)
_GDIPlus_GraphicsTransformPointsI ($hGraphics, $aPoints, $iCoordSpaceTo, $iCoordSpaceFrom)  Converts an array of points from one coordinate space to another (required: #include <GDIP.au3>)
_GDIPlus_GraphicsTranslateClip ($hGraphics, $nDX, $nDY)  Translates the clipping region of a Graphics object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsTranslateTransform ($hGraphics, $nDX, $nDY[, $iOrder = 0])  Updates a Graphics object's world transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)
_GDIPlus_StreamCreateOnFile ($sFileName[, $iAccess = 0x80000000])  Returns a pointer to an IStream interface based on a file (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateFromEmf ($hEnMetaFile[, $fReleasehEnMetaFile = False])  Creates a Metafile object for playback based on a GDI Enhanced Metafile (EMF) file. (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateFromFile ($sFileName)  Creates a Metafile object for playback from a file (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateFromStream ($pStream)  Creates a Metafile object for playback from an IStream interface (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateFromWmf ($hWMetaFile[, $pWmfPlaceableFileHeader = 0[, $fReleasehWMetaFile = False]])  Creates a Metafile object for recording. The format will be placeable metafile (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateFromWmfFile ($sFileName[, $pWmfPlaceableFileHeader = 0])  Creates a Metafile object for playback (required: #include <GDIP.au3>)
_GDIPlus_MetafileCreateHENMETAFILEFromMetafile ($hMetaFile)  Gets a Windows handle to an Enhanced Metafile object from an existing Metafile object (required: #include <GDIP.au3>)
_GDIPlus_MetafileEmfToWmfBits ($hEnMetaFile[, $iMapMode = 8[, $iFlags = 0]])  Converts an enhanced-format metafile to a Microsoft Windows Metafile Format (WMF) metafile (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateDestPoint ($hGraphics, $hMetaFile, $nX, $nY, $pEnumCallback[, $pCallbackData = 0[, $hImageAttributes = 0]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateDestPoints ($hGraphics, $hMetaFile, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $pEnumCallback[, $pCallbackData = 0[, $hImageAttributes = 0]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateDestRect ($hGraphics, $hMetaFile, $tDstRectF, $pEnumCallback[, $pCallbackData = 0[, $hImageAttributes = 0]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateSrcRectDestPoint ($hGraphics, $hMetaFile, $nX, $nY, $tSrcRectF, $pEnumCallback[, $pCallbackData = 0[, $iUnit = 2,[ $hImageAttributes = 0]]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateSrcRectDestPoints ($hGraphics, $hMetaFile, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $tSrcRectF, $pEnumCallback[, $pCallbackData = 0[, $iUnit = 2[, $hImageAttributes = 0]]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileEnumerateSrcRectDestRect ($hGraphics, $hMetaFile, $tDstRectF, $tSrcRectF, $pEnumCallback[, $pCallbackData = 0[, $iUnit = 2[, $hImageAttributes = 0]]])  Calls an application-defined callback function for each record in a specified metafile. You can use this (required: #include <GDIP.au3>)
_GDIPlus_MetafileGetDownLevelRasterizationLimit ($hMetaFile)  Gets the rasterization limit currently set for this metafile (required: #include <GDIP.au3>)
_GDIPlus_MetafileHeaderFromEmf ($hEnMetaFile)  Gets a metafile header from an enhanced metafile (required: #include <GDIP.au3>)
_GDIPlus_MetafileHeaderFromFile ($sFileName)  Gets a metafile header of a file (required: #include <GDIP.au3>)
_GDIPlus_MetafileHeaderFromMetafile ($hMetaFile)  Gets a metafile header of a Metafile object (required: #include <GDIP.au3>)
_GDIPlus_MetafileHeaderFromStream ($pStream)  Gets a metafile header of an IStream interface (required: #include <GDIP.au3>)
_GDIPlus_MetafileHeaderFromWmf ($hWMetaFile, $tWmfPlaceableFileHeader)  Gets a metafile header from a window metafile handle and a placeable metafile header (required: #include <GDIP.au3>)
_GDIPlus_MetafilePlayRecord ($hMetaFile, $iRecordType, $iFlags, $iDataSize, $pData)  Plays a metafile record (required: #include <GDIP.au3>)
_GDIPlus_MetafileRecord ($hDC[, $pRectF = 0[, $iType = 5[, $iUnit = 7[, $sDescription = 0]]]])  Creates a Metafile object for recording (required: #include <GDIP.au3>)
_GDIPlus_MetafileRecordFileName ($sFileName, $hDC[, $tRectF = 0[, $iType = 5[, $iUnit = 7[, $sDescription = 0]]]])  Creates a Metafile object for recording (required: #include <GDIP.au3>)
_GDIPlus_MetafileRecordStream ($pStream, $hDC[, $pRectF = 0[, $iType = 5[, $iUnit = 7[, $sDescription = 0]]]])  Creates a Metafile object for recording (required: #include <GDIP.au3>)
_GDIPlus_MetafileSetDownLevelRasterizationLimit ($hMetaFile, $iRasterizationLimitDPI)  Sets the resolution for certain brush bitmaps that are stored in a metafile (required: #include <GDIP.au3>)
_GDIPlus_PathAddArc ($hPath, $nX, $nY, $nWidth, $nHeight, $nStartAngle, $nSweepAngle)  Adds an elliptical arc to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddBezier ($hPath, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4)  Adds a bezier spline to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddBeziers ($hPath, $aPoints)  Adds a sequence of connected bezier splines to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddClosedCurve ($hPath, $aPoints)  Adds a closed cardinal spline to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddClosedCurves ($hPath, $aPoints, $nTension)  Adds a closed cardinal spline to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddCurve ($hPath, $aPoints)  Adds a cardinal spline to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddCurves ($hPath, $aPoints, $nTension)  Adds a cardinal spline to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddCurvesSubset ($hPath, $aPoints, $iOffset, $iNumOfSegments, $nTension)  Adds a cardinal spline to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddEllipse ($hPath, $nX, $nY, $nWidth, $nHeight)  Adds an ellipse to the current figure a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddLine ($hPath, $nX1, $nY1, $nX2, $nY2)  Adds a line to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddLines ($hPath, $aPoints)  Adds a sequence of lines to the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddPath ($hPath1, $hPath2[, $fConnect = True])  Adds a path to another path (required: #include <GDIP.au3>)
_GDIPlus_PathAddPie ($hPath, $nX, $nY, $nWidth, $nHeight, $nStartAngle, $nSweepAngle)  Adds a pie to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddPolygon ($hPath, $aPoints)  Adds a polygon to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddRectangle ($hPath, $nX, $nY, $nWidth, $nHeight)  Adds a rectangle to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddRectangles ($hPath, $aRects)  Adds a sequence of rectangles to a path (required: #include <GDIP.au3>)
_GDIPlus_PathAddString ($hPath, $sString, $tLayout[, $hFamily = 0[, $iStyle = 0[, $nSize = 8.5[, $hFormat = 0]]]])  Adds the outline of a string to a path (required: #include <GDIP.au3>)
_GDIPlus_PathClearMarkers ($hPath)  Clears the markers from a path (required: #include <GDIP.au3>)
_GDIPlus_PathClone ($hPath)  Clones a path (required: #include <GDIP.au3>)
_GDIPlus_PathCloseFigure ($hPath)  Closes the current figure of a path (required: #include <GDIP.au3>)
_GDIPlus_PathCloseFigures ($hPath)  Closes all open figures in a path (required: #include <GDIP.au3>)
_GDIPlus_PathCreate ([$iFillMode = 0])  Creates a GraphicsPath object and initializes the fill mode (required: #include <GDIP.au3>)
_GDIPlus_PathCreate2 ($aPtTypes[, $iFillMode = 0])  Creates a GraphicsPath object based on an array of points, an array of types, and a fill mode (required: #include <GDIP.au3>)
_GDIPlus_PathDispose ($hPath)  Releases a GraphicsPath object (required: #include <GDIP.au3>)
_GDIPlus_PathFlatten ($hPath[, $nFlatness = $FlatnessDefault[, $hMatrix = 0]])  Applies a transformation to a path and converts each curve in the path to a sequence of connected lines (required: #include <GDIP.au3>)
_GDIPlus_PathGetData ($hPath)  Gets an array of points and types from a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetFillMode ($hPath)  Gets the fill mode of a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetLastPoint ($hPath)  Gets the ending point of the last figure in a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetPointCount ($hPath)  Gets the number of points in a path's array of data points (required: #include <GDIP.au3>)
_GDIPlus_PathGetPoints ($hPath)  Gets an array of points from a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetPointsI ($hPath)  Gets an array of points from a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetTypes ($hPath)  Gets an array of types from a path (required: #include <GDIP.au3>)
_GDIPlus_PathGetWorldBounds ($hPath[, $hMatrix = 0[, $hPen = 0]])  Gets the bounding rectangle for a path (required: #include <GDIP.au3>)
_GDIPlus_PathIsOutlineVisiblePoint ($hPath, $nX, $nY[, $hPen = 0[, $hGraphics = 0]])  Determines whether a specified point touches the outline of a path with the specified Graphics and Pen (required: #include <GDIP.au3>)
_GDIPlus_PathIsVisiblePoint ($hPath, $nX, $nY[, $hGraphics = 0])  Determines whether a specified point lies in the area that is filled when a path is filled by a specified (required: #include <GDIP.au3>)
_GDIPlus_PathReset ($hPath)  Empties a path and sets the fill mode to alternate (0) (required: #include <GDIP.au3>)
_GDIPlus_PathReverse ($hPath)  Reverses the order of the points that define a path's lines and curves (required: #include <GDIP.au3>)
_GDIPlus_PathSetFillMode ($hPath, $iFillMode)  Sets the fill mode of a path (required: #include <GDIP.au3>)
_GDIPlus_PathSetMarker ($hPath)  Designates the last point in a path as a marker point (required: #include <GDIP.au3>)
_GDIPlus_PathStartFigure ($hPath)  Starts a new figure without closing the current figure. Subsequent points added to a path are added to the new (required: #include <GDIP.au3>)
_GDIPlus_PathTransform ($hPath, $hMatrix)  Multiplies each of a path's data points by a specified matrix (required: #include <GDIP.au3>)
_GDIPlus_PathWarp ($hPath, $hMatrix, $aPoints, $nX, $nY, $nWidth, $nHeight[, $iWarpMode = 0[, $nFlatness = $FlatnessDefault]])  Applies a warp transformation to a path. The function also flattens (converts to a sequence of straight lines) (required: #include <GDIP.au3>)
_GDIPlus_PathWiden ($hPath, $hMatrix[, $nFlatness = $FlatnessDefault[, $hPen = 0]])  Replaces a path with curves that enclose the area that is filled when the path is drawn by a specified pen. (required: #include <GDIP.au3>)
_GDIPlus_PathWindingModeOutline ($hPath, $hMatrix[, $nFlatness = $FlatnessDefault])  Transforms and flattens a path, and then converts the path's data points so that they represent only the (required: #include <GDIP.au3>)
_GDIPlus_PathIterCopyData ($hPathIter, $iStartIndex, $iEndIndex)  Gets a subset of the path's data points and types (required: #include <GDIP.au3>)
_GDIPlus_PathIterCreate ($hPath)  Creates a new GraphicsPathIterator object and associates it with a GraphicsPath object (required: #include <GDIP.au3>)
_GDIPlus_PathIterDispose ($hPath)  Releases a GraphicsPathIterator object (required: #include <GDIP.au3>)
_GDIPlus_PathIterEnumerate ($hPathIter)  Gets the path's data points and types (required: #include <GDIP.au3>)
_GDIPlus_PathIterGetCount ($hPathIter)  Gets the number of data points in the path (required: #include <GDIP.au3>)
_GDIPlus_PathIterGetSubpathCount ($hPathIter)  Gets the number of subpaths (also called figures) in the path (required: #include <GDIP.au3>)
_GDIPlus_PathIterHasCurve ($hPathIter)  Determines whether the path has any curves (required: #include <GDIP.au3>)
_GDIPlus_PathIterIsValid ($hPathIter)  Determines whether the specified GraphicsPathIterator object pointed to by the parameter is valid (required: #include <GDIP.au3>)
_GDIPlus_PathIterNextMarker ($hPathIter)  Gets the starting and ending indices of the next marker-delimited section in an iterator's associated path (required: #include <GDIP.au3>)
_GDIPlus_PathIterNextMarkerPath ($hPathIter, $hPath)  Gets the next marker-delimited section of an iterator's associated path (required: #include <GDIP.au3>)
_GDIPlus_PathIterNextPathType ($hPathIter)  Gets the starting and ending indices of the next group of data points that all have the same type (required: #include <GDIP.au3>)
_GDIPlus_PathIterNextSubpath ($hPathIter)  Gets the starting and ending indices of the next subpath (figure) in an iterator's associated path (required: #include <GDIP.au3>)
_GDIPlus_PathIterNextSubpathPath ($hPathIter, $hPath)  Gets the next figure (subpath) from an iterator's associated path (required: #include <GDIP.au3>)
_GDIPlus_PathIterRewind ($hPathIter)  Rewinds an iterator to the beginning of its associated path (required: #include <GDIP.au3>)
_GDIPlus_HatchBrushCreate ([$iHatchStyle = 0[, $iARGBForeground = 0xFFFFFFFF[, $iARGBBackground = 0xFFFFFFFF]]])  Creates a HatchBrush object based on a hatch style, a foreground color, and a background color (required: #include <GDIP.au3>)
_GDIPlus_HatchBrushGetBackgroundColor ($hHatchBrush)  Gets the background color of a hatch brush (required: #include <GDIP.au3>)
_GDIPlus_HatchBrushGetForegroundColor ($hHatchBrush)  Gets the foreground color of a hatch brush (required: #include <GDIP.au3>)
_GDIPlus_HatchBrushGetStyle ($hHatchBrush)  Gets the hatch style of a hatch brush (required: #include <GDIP.au3>)
_GDIPlus_ImageClone ($hImage)  Clones an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageForceValidation ($hImage)  Forces validation of an image (required: #include <GDIP.au3>)
_GDIPlus_ImageGetAllPropertyItems ($hImage)  Gets all the property items (metadata) stored in an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetBounds ($hImage)  Gets the bounding rectangle for an image (required: #include <GDIP.au3>)
_GDIPlus_ImageGetDimension ($hImage)  Gets the width and height of an image (required: #include <GDIP.au3>)
_GDIPlus_ImageGetFrameCount ($hImage, $sDimensionID)  Gets the number of frames in a specified dimension of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetFrameDimensionsCount ($hImage)  Gets the number of frame dimensions in an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetFrameDimensionsList ($hImage)  Gets the identifiers for the frame dimensions of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPalette ($hImage)  Gets the color palette of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPaletteSize ($hImage)  Gets the size, in bytes, of the color palette of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPropertyCount ($hImage)  Gets the number of properties (pieces of metadata) stored in an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPropertyIdList ($hImage)  Gets a list of the property identifiers used in the metadata of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPropertyItem ($hImage, $iPropID)  Gets a specified property item (piece of metadata) from an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPropertyItemSize ($hImage, $iPropID)  Gets the size, in bytes, of a specified property item of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetPropertySize ($hImage)  Gets the total size, in bytes, and the number of all the property items stored in an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageGetThumbnail ($hImage[, $iTNWidth = 32[, $iTNHeight = 32]])  Gets a thumbnail image from an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageLoadFromFileICM ($sFileName)  Creates an Image object based on a file. This function uses ICM (required: #include <GDIP.au3>)
_GDIPlus_ImageLoadFromStream ($pStream)  Creates an Image object based on a stream (required: #include <GDIP.au3>)
_GDIPlus_ImageLoadFromStreamICM ($pStream)  Creates an Image object based on a stream. This function uses ICM (required: #include <GDIP.au3>)
_GDIPlus_ImageRemovePropertyItem ($hImage, $iPropID)  Removes a property item (piece of metadata) from an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageRotateFlip ($hImage, $iRotateFlipType)  Rotates and flips an image (required: #include <GDIP.au3>)
_GDIPlus_ImageSaveAdd ($hImage, $pParams)  Adds a frame to a file or stream (required: #include <GDIP.au3>)
_GDIPlus_ImageSaveAddImage ($hImage, $hImageNew, $pParams)  Adds a frame to a file or stream (required: #include <GDIP.au3>)
_GDIPlus_ImageSaveToStream ($hImage, $pStream, $pEncoder[, $pParams = 0])  Saves an Image object to a stream (required: #include <GDIP.au3>)
_GDIPlus_ImageSelectActiveFrame ($hImage, $sDimensionID, $iFrameIndex)  Selects a frame in an Image object specified by a dimension and an index (required: #include <GDIP.au3>)
_GDIPlus_ImageSetPalette ($hImage, $pColorPalette)  Sets the color palette of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageSetPropertyItem ($hImage, $pPropertyItem)  Sets the color palette of an Image object (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesClone ($hImageAttributes)  Clones an ImageAttributes object (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesCreate ()  Creates an ImageAttributes object (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesDispose ($hImageAttributes)  Releases an ImageAttributes object (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesGetAdjustedPalette ($hImageAttributes, $pColorPalette[, $iColorAdjustType = 0])  Adjusts the colors in a palette according to the adjustment settings of a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesReset ($hImageAttributes[, $iColorAdjustType = 0])  Clears all color- and grayscale-adjustment settings for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetColorKeys ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $iARGBLow = 0[, $iARGBHigh = 0]]]])  Sets or clears the color key (transparency range) for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetColorMatrix ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False,[ $pClrMatrix = 0[, $pGrayMatrix = 0[, $iColorMatrixFlags = 0]]]]])  Sets or clears the color- and grayscale-adjustment matrices for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetGamma ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $nGamma = 0]]])  Sets or clears the gamma value for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetNoOp ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = True]])  Turns on or off color adjustment for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetOutputChannel ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $iColorChannelFlags = 4]]])  Sets or clears the CMYK (Cyan, Magenta, Yellow and Black) output channel for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetOutputChannelColorProfile ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $sFileName = 0]]])  Sets or clears the output channel color-profile file for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetRemapTable ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $aColorMap = 0]]])  Sets or clears the color-remap table for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetThreshold ($hImageAttributes[, $iColorAdjustType = 0[, $fEnable = False[, $nThershold = 0]]])  Sets or clears the threshold (transparency range) for a specified category (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetToIdentity ($hImageAttributes[, $iColorAdjustType = 0])  Sets the color-adjustment matrix of a specified category to identity matrix (required: #include <GDIP.au3>)
_GDIPlus_ImageAttributesSetWrapMode ($hImageAttributes, $iWrapMode[, $iARGB = 0xFF000000])  Sets the wrap mode of an ImageAttributes object (required: #include <GDIP.au3>)
_GDIPlus_LineBrushCreate ($nX1, $nY1, $nX2, $nY2, $iARGBClr1, $iARGBClr2[, $iWrapMode = 0])  Creates a LinearGradientBrush object from a set of boundary points and boundary colors (required: #include <GDIP.au3>)
_GDIPlus_LineBrushCreateFromRect ($tRectF, $iARGBClr1, $iARGBClr2[, $iGradientMode = 0[, $iWrapMode = 0]])  Creates a LinearGradientBrush object from a rectangle and boundary colors (required: #include <GDIP.au3>)
_GDIPlus_LineBrushCreateFromRectWithAngle ($tRectF, $iARGBClr1, $iARGBClr2, $nAngle[, $fIsAngleScalable = True[, $iWrapMode = 0]])  Creates a LinearGradientBrush object from a rectangle, boundary colors and angle of direction (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetBlend ($hLineGradientBrush)  Gets the blend factors and their corresponding blend positions from a LinearGradientBrush object (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetBlendCount ($hLineGradientBrush)  Gets the number of blend factors currently set for a LinearGradientBrush object (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetColors ($hLineGradientBrush)  Gets the starting color and ending color of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetGammaCorrection ($hLineGradientBrush)  Determines whether gamma correction is enabled for a LinearGradientBrush object (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetPresetBlend ($hLineGradientBrush)  Gets the colors currently set to be interpolated for a linear gradient brush and their blend positions (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetPresetBlendCount ($hLineGradientBrush)  Gets the number of colors currently set to be interpolated for a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetRect ($hLineGradientBrush)  Gets the rectangle that defines the boundaries of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetTransform ($hLineGradientBrush, $hMatrix)  Gets the transformation matrix of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushGetWrapMode ($hLineGradientBrush)  Gets the wrap mode of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushMultiplyTransform ($hLineGradientBrush, $hMatrix[, $iOrder = 0])  Updates a brush's transformation matrix with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_LineBrushResetTransform ($hLineGradientBrush)  Resets the transformation matrix of a linear gradient brush to the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_LineBrushRotateTransform ($hLineGradientBrush, $nAngle[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a rotation matrix (required: #include <GDIP.au3>)
_GDIPlus_LineBrushScaleTransform ($hLineGradientBrush, $nScaleX, $nScaleY[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a scaling matrix (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetBlend ($hLineGradientBrush, $aBlends)  Sets the blend factors and the blend positions of a linear gradient brush to create a custom blend (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetColors ($hLineGradientBrush, $iARGBStart, $iARGBEnd)  Sets the starting color and ending color of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetGammaCorrection ($hLineGradientBrush[, $fUseGammaCorrection = True])  Specifies whether gamma correction is enabled for a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetLinearBlend ($hLineGradientBrush, $nFocus[, $nScale = 1])  Sets the blend shape of a linear gradient brush to create a custom blend based on a triangular shape (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetPresetBlend ($hLineGradientBrush, $aInterpolations)  Sets the colors to be interpolated for a linear gradient brush and their corresponding blend positions (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetSigmaBlend ($hLineGradientBrush, $nFocus[, $nScale = 1])  Sets the blend shape of a linear gradient brush to create a custom blend based on a bell-shaped curve (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetTransform ($hLineGradientBrush, $hMatrix)  Sets the transformation matrix of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushSetWrapMode ($hLineGradientBrush, $iWrapMode)  Sets the wrap mode of a linear gradient brush (required: #include <GDIP.au3>)
_GDIPlus_LineBrushTranslateTransform ($hLineGradientBrush, $nDX, $nDY[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixClone ($hMatrix)  Clones a Matrix object (required: #include <GDIP.au3>)
_GDIPlus_MatrixCreate2 ($nM11, $nM12, $nM21, $nM22, $nDX, $nDY)  Creates and initializes a Matrix object based on six numbers that define an affine transformation (required: #include <GDIP.au3>)
_GDIPlus_MatrixCreate3 ($tRectF, $nDX, $nDY)  Creates and initializes a Matrix object based on a rectangle and a point (required: #include <GDIP.au3>)
_GDIPlus_MatrixGetElements ($hMatrix)  Gets the elements of a matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixInvert ($hMatrix)  Replaces the elements of a matrix with the elements of its inverse (required: #include <GDIP.au3>)
_GDIPlus_MatrixIsEqual ($hMatrix1, $hMatrix2)  Determines whether the elements of a matrix are equal to the elements of another matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixIsIdentity ($hMatrix)  Determines whether a matrix is the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixIsInvertible ($hMatrix)  Determines whether a matrix is invertible (required: #include <GDIP.au3>)
_GDIPlus_MatrixMultiply ($hMatrix1, $hMatrix2[, $iOrder = 0])  Updates a matrix with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixSetElements ($hMatrix, $nM11, $nM12, $nM21, $nM22, $nDX, $nDY)  Sets the elements of a matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixShear ($hMatrix, $nShearX, $nShearY[, $iOrder = 0])  Updates a matrix with the product of itself and a shearing matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixTransformPoints ($hMatrix, $aPoints)  Multiplies each point in an array by a matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixTransformPointsI ($hMatrix, $aPoints)  Multiplies each point in an array by a matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixVectorTransformPoints ($hMatrix, $aPoints)  Multiplies each vector in an array by a matrix (required: #include <GDIP.au3>)
_GDIPlus_MatrixVectorTransformPointsI ($hMatrix, $aPoints)  Multiplies each vector in an array by a matrix (required: #include <GDIP.au3>)
_GDIPlus_PathBrushCreate ($aPoints[, $iWrapMode = 0])  Creates a PathGradientBrush object based on an array of points and initializes the wrap mode of the brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushCreateFromPath ($hPath)  Creates a PathGradientBrush object based on a GraphicsPath object (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetBlend ($hPathGradientBrush)  Gets the blend factors and the corresponding blend positions currently set for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetBlendCount ($hPathGradientBrush)  Gets the number of blend factors currently set for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetCenterColor ($hPathGradientBrush)  Gets the color of the center point of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetCenterPoint ($hPathGradientBrush)  Gets the center point of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetCenterPointI ($hPathGradientBrush)  Gets the center point of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetFocusScales ($hPathGradientBrush)  Gets the focus scales of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetGammaCorrection ($hPathGradientBrush)  Determines whether gamma correction is enabled for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetPointCount ($hPathGradientBrush)  Gets the number of points in the array of points that defines a brush's boundary path (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetPresetBlend ($hPathGradientBrush)  Gets the preset colors and blend positions currently specified for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetPresetBlendCount ($hPathGradientBrush)  Gets the number of preset colors currently specified for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetRect ($hPathGradientBrush)  Gets the smallest rectangle that encloses the boundary path of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetSurroundColorCount ($hPathGradientBrush)  Gets the number of colors that have been specified for the boundary path of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetSurroundColorsWithCount ($hPathGradientBrush)  Gets the surround colors currently specified for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetTransform ($hPathGradientBrush, $hMatrix)  Gets the transformation matrix of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushGetWrapMode ($hPathGradientBrush)  Gets the wrap mode currently set for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushMultiplyTransform ($hPathGradientBrush, $hMatrix[, $iOrder = 0])  Updates a brush's transformation matrix with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_PathBrushResetTransform ($hPathGradientBrush)  Resets the transformation matrix of a path gradient brush to the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_PathBrushRotateTransform ($hPathGradientBrush, $nAngle[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a rotation matrix (required: #include <GDIP.au3>)
_GDIPlus_PathBrushScaleTransform ($hPathGradientBrush, $nScaleX, $nScaleY[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a scaling matrix (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetBlend ($hPathGradientBrush, $aBlends)  Sets the blend factors and the blend positions of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetCenterColor ($hPathGradientBrush, $iARGB)  Sets the color of the center point of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetCenterPoint ($hPathGradientBrush, $nX, $nY)  Sets the center point of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetFocusScales ($hPathGradientBrush, $nScaleX, $nScaleY)  Sets the focus scales of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetGammaCorrection ($hPathGradientBrush, $fUseGammaCorrection)  Specifies whether gamma correction is enabled for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetLinearBlend ($hPathGradientBrush, $nFocus[, $nScale = 1])  Sets the blend shape of a path gradient brush to create a custom blend based on a triangular shape (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetPresetBlend ($hPathGradientBrush, $aInterpolations)  Sets the preset colors and the blend positions of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetSigmaBlend ($hPathGradientBrush, $nFocus[, $nScale = 1])  Sets the blend shape of a path gradient brush to create a custom blend based on a bell-shaped curve (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetSurroundColorsWithCount ($hPathGradientBrush, $aColors)  Sets the surround colors currently specified for a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetTransform ($hPathGradientBrush, $hMatrix)  Sets the transformation matrix of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushSetWrapMode ($hPathGradientBrush, $iWrapMode)  Sets the wrap mode of a path gradient brush (required: #include <GDIP.au3>)
_GDIPlus_PathBrushTranslateTransform ($hPathGradientBrush, $nDX, $nDY[, $iOrder = 0])  Updates a brush's current transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)
_GDIPlus_PenClone ($hPen)  Clones a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenCreate2 ($hBrush[, $nWidth = 1[, $iUnit = 2]])  Creates a Pen object that uses the attributes of a brush (required: #include <GDIP.au3>)
_GDIPlus_PenGetBrushFill ($hPen)  Gets the Brush object that is currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetCompoundArray ($hPen)  Gets the compound array currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetCompoundCount ($hPen)  Gets the number of elements in a Pen's compound array (required: #include <GDIP.au3>)
_GDIPlus_PenGetCustomStartCap ($hPen)  Gets the custom start cap for the pen (required: #include <GDIP.au3>)
_GDIPlus_PenGetDashArray ($hPen)  Gets an array of custom dashes and spaces currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetDashCount ($hPen)  Gets the number of elements in a Pen object's dash pattern array (required: #include <GDIP.au3>)
_GDIPlus_PenGetDashOffset ($hPen)  Gets the distance from the start of the line to the start of the first space in a dashed line (required: #include <GDIP.au3>)
_GDIPlus_PenGetFillType ($hPen)  Gets the type of brush fill currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetLineJoin ($hPen)  Gets the line join style currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetMiterLimit ($hPen)  Gets the miter length currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetStartCap ($hPen)  Gets the start cap currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetTransform ($hPen, $hMatrix)  Gets the world transformation matrix currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenGetUnit ($hPen)  Gets the unit of measurement for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenMultiplyTransform ($hPen, $hMatrix[, $iOrder = 0])  Updates the world transformation matrix of a Pen object with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_PenResetTransform ($hPen)  Resets the world transformation matrix of a Pen object to the identity matrix (required: #include <GDIP.au3>)
_GDIPlus_PenRotateTransform ($hPen, $nAngle[, $iOrder = 0])  Updates the world transformation matrix of a Pen object with the product of itself and a rotation matrix (required: #include <GDIP.au3>)
_GDIPlus_PenScaleTransform ($hPen, $nScaleX, $nScaleY[, $iOrder = 0])  Updates the world transformation matrix of a Pen object with the product of itself and a scaling matrix (required: #include <GDIP.au3>)
_GDIPlus_PenSetBrushFill ($hPen, $hBrush)  Sets the Brush object that a pen uses to fill a line (required: #include <GDIP.au3>)
_GDIPlus_PenSetCompoundArray ($hPen, $aCompounds)  Sets the compound array currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetCustomStartCap ($hPen, $hCustomLineCap)  Sets the custom start cap for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetDashArray ($hPen, $aDashes)  Gets an array of custom dashes and spaces currently set for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetDashOffset ($hPen, $nOffset)  Sets the distance from the start of the line to the start of the first space in a dashed line (required: #include <GDIP.au3>)
_GDIPlus_PenSetLineCap ($hPen, $iStartCap, $iEndCap, $iDashCap)  Sets the cap styles for the start, end, and dashes in a line drawn with the pen (required: #include <GDIP.au3>)
_GDIPlus_PenSetLineJoin ($hPen, $iLineJoin)  Sets the line join for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetMiterLimit ($hPen, $nMiterLimit)  Sets the miter limit of a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetStartCap ($hPen, $iLineCap)  Sets the start cap for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetTransform ($hPen, $hMatrix)  Sets the world transformation of a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenSetUnit ($hPen, $iUnit)  Sets the unit of measurement for a Pen object (required: #include <GDIP.au3>)
_GDIPlus_PenTranslateTransform ($hPen, $nDX, $nDY[, $iOrder = 0])  Updates a pen's current transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)
_GDIPlus_RegionClone ($hRegion)  Clones a Region object (required: #include <GDIP.au3>)
_GDIPlus_RegionCombinePath ($hRegion, $hPath[, $iCombineMode = 2])  Updates a region to the portion of itself that intersects the specified path's interior (required: #include <GDIP.au3>)
_GDIPlus_RegionCombineRect ($hRegion, $tRectF[, $iCombineMode = 2])  Updates a region to the portion of itself that intersects the specified rectangle's interior (required: #include <GDIP.au3>)
_GDIPlus_RegionCombineRegion ($hRegionDst, $hRegionSrc[, $iCombineMode = 2])  Updates a region to the portion of itself that intersects another region (required: #include <GDIP.au3>)
_GDIPlus_RegionCreate ()  Creates a region that is infinite (required: #include <GDIP.au3>)
_GDIPlus_RegionCreateFromHrgn ($hRgn)  Creates a region that is identical to the region that is specified by a handle to GDI region (HRGN) (required: #include <GDIP.au3>)
_GDIPlus_RegionCreateFromPath ($hPath)  Creates a region that is defined by a path object and has a fill mode that is contained in the path object (required: #include <GDIP.au3>)
_GDIPlus_RegionCreateFromRect ($tRectF)  Creates a region that is defined by a rectangle (required: #include <GDIP.au3>)
_GDIPlus_RegionCreateFromRgnData ($tData)  Creates a region that is defined by data obtained from another region (required: #include <GDIP.au3>)
_GDIPlus_RegionDispose ($hRegion)  Releases a Region object (required: #include <GDIP.au3>)
_GDIPlus_RegionGetBounds ($hRegion, $hGraphics)  Gets a rectangle that encloses a region (required: #include <GDIP.au3>)
_GDIPlus_RegionGetData ($hRegion)  Gets the data that describes a region (required: #include <GDIP.au3>)
_GDIPlus_RegionGetDataSize ($hRegion)  Gets the number of bytes of data that describes a Region object (required: #include <GDIP.au3>)
_GDIPlus_RegionGetHRgn ($hRegion, $hGraphics)  Creates a GDI region from a GDI+ Region object (required: #include <GDIP.au3>)
_GDIPlus_RegionGetScans ($hRegion[, $hMatrix = 0])  Gets an array of rectangles that approximate a region (required: #include <GDIP.au3>)
_GDIPlus_RegionGetScansCount ($hRegion, $hMatrix)  Gets the number of rectangles that approximate a region (required: #include <GDIP.au3>)
_GDIPlus_RegionIsEmpty ($hRegion, $hGraphics)  Determines whether a region is empty (required: #include <GDIP.au3>)
_GDIPlus_RegionIsEqual ($hRegion1, $hRegion2, $hGraphics)  Determines whether a region is equal to another region (required: #include <GDIP.au3>)
_GDIPlus_RegionIsInfinite ($hRegion, $hGraphics)  Determines whether a region is infinite (required: #include <GDIP.au3>)
_GDIPlus_RegionIsVisiblePoint ($hRegion, $nX, $nY[, $hGraphics = 0])  Determines whether a point is inside a region (required: #include <GDIP.au3>)
_GDIPlus_RegionIsVisibleRect ($hRegion, $nX, $nY, $nWidth, $nHeight[, $hGraphics = 0])  Determines whether a rectangle intersects a region (required: #include <GDIP.au3>)
_GDIPlus_RegionSetEmpty ($hRegion)  Updates a region to an empty region. In other words, the region occupies no space on the display device (required: #include <GDIP.au3>)
_GDIPlus_RegionSetInfinite ($hRegion)  Updates a region to an infinite region (required: #include <GDIP.au3>)
_GDIPlus_RegionTransform ($hRegion, $hMatrix)  Tansforms a region by multiplying each of its data points by a specified matrix (required: #include <GDIP.au3>)
_GDIPlus_RegionTranslate ($hRegion, $nDX, $nDY)  Updates a brush's current transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)
_GDIPlus_BrushGetFillColor ($hBrush)  Gets the fill color of a solid brush (required: #include <GDIP.au3>)
_GDIPlus_BrushSetFillColor ($hBrush, $iARGB)  Sets the fill color of a solid brush (required: #include <GDIP.au3>)
_GDIPlus_StringFormatClone ($hStringFormat)  Clones a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatCreateDefault ()  Creates a generic, default StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatCreateTypographic ()  Creates a generic, typographic StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetAlign ($hStringFormat)  Gets the string alignment currently set for the StringFormat object that indicates the character alignment of (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetDigitSubstitution ($hStringFormat)  Gets the language ID and the digit substitution method that is used by a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetFlags ($hStringFormat)  Gets the string format flags of a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetHotkeyPrefix ($hStringFormat)  Gets the type of processing that is performed on a string when a hot key prefix (&) is encountered (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetLineAlign ($hStringFormat)  Gets the line alignment of a StringFormat object in relation to the origin of a layout rectangle (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetMeasurableCharacterRangeCount ($hStringFormat)  Gets the number of measurable character ranges that are currently set for a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetTabStopCount ($hStringFormat)  Gets the number of tab-stop offsets in a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetTabStops ($hStringFormat)  Gets the offsets of the tab stops in a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatGetTrimming ($hStringFormat)  Gets the trimming style of a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetDigitSubstitution ($hStringFormat, $iLANGID, $iStringDigitSubstitute)  Sets the language ID and the digit substitution method that is used by a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetFlags ($hStringFormat, $iFlags)  Sets the format flags for a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetHotkeyPrefix ($hStringFormat, $iHotKeyPerfix)  Sets the type of processing that is performed on a string when a hot key prefix (&) is encountered (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetLineAlign ($hStringFormat, $iStringAlign)  Sets the line alignment of a StringFormat object in relation to the origin of a layout rectangle (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetMeasurableCharacterRanges ($hStringFormat, $aRanges)  Sets a series of character ranges for a StringFormat object that, when in a string, can be measured (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetTabStops ($hStringFormat, $aStops)  Sets the offsets for tab stops in a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_StringFormatSetTrimming ($hStringFormat, $iStringTrimming)  Sets the trimming style for a StringFormat object (required: #include <GDIP.au3>)
_GDIPlus_GraphicsDrawDriverString ($hGraphics, $vText, $hFont, $hBrush, $aPoints[, $iStrLen = -1[, $iFlag = 1[, $hMatrix = 0]]])  Draws characters at the specified positions. (required: #include <GDIP.au3>)
_GDIPlus_GraphicsMeasureCharacterRanges ($hGraphics, $sString, $hFont, $tLayout, $hStringFormat)  Gets a set of region objects each of which bounds a range of character positions within a string (required: #include <GDIP.au3>)
_GDIPlus_GraphicsMeasureDriverString ($hGraphics, $vText, $hFont, $aPoints[, $iStrLen = -1[, $iFlag = 1[, $hMatrix = 0]]])  Measures the bounding box for the specified characters and their corresponding positions (required: #include <GDIP.au3>)
_GDIPlus_TextureCreate ($hImage[, $iWrapMode = 0])  Creates a TextureBrush object based on an image and a wrap mode (required: #include <GDIP.au3>)
_GDIPlus_TextureCreate2 ($hImage, $nX, $nY, $nWidth, $nHeight[, $iWrapMode = 0])  Creates a TextureBrush object based on an image, a wrap mode and a defining rectangle (required: #include <GDIP.au3>)
_GDIPlus_TextureCreateIA ($hImage, $nX, $nY, $nWidth, $nHeight[, $hImageAttributes = 0])  Creates a TextureBrush object based on an image, a defining rectangle, and a set of image properties (required: #include <GDIP.au3>)
_GDIPlus_TextureGetImage ($hTextureBrush)  Gets a pointer to the Image object that is defined by a texture brush (required: #include <GDIP.au3>)
_GDIPlus_TextureGetTransform ($hTextureBrush, $hMatrix)  Gets the transformation matrix of a texture brush (required: #include <GDIP.au3>)
_GDIPlus_TextureGetWrapMode ($hTextureBrush)  Gets the wrap mode currently set for a texture brush (required: #include <GDIP.au3>)
_GDIPlus_TextureMultiplyTransform ($hTextureBrush, $hMatrix[, $iOrder = 0])  Updates a texture brush's transformation matrix with the product of itself and another matrix (required: #include <GDIP.au3>)
_GDIPlus_TextureResetTransform ($hTextureBrush)  Resets the transformation matrix of a texture brush to the identity matrix) (required: #include <GDIP.au3>)
_GDIPlus_TextureRotateTransform ($hTextureBrush, $nAngle[, $iOrder = 0])  Updates a texture brush's current transformation matrix with the product of itself and a rotation matrix (required: #include <GDIP.au3>)
_GDIPlus_TextureScaleTransform ($hTextureBrush, $nScaleX, $nScaleY[, $iOrder = 0])  Updates a texture brush's current transformation matrix with the product of itself and a scaling matrix (required: #include <GDIP.au3>)
_GDIPlus_TextureSetTransform ($hTextureBrush, $hMatrix)  Sets the transformation matrix of a texture brush (required: #include <GDIP.au3>)
_GDIPlus_TextureSetWrapMode ($hTextureBrush, $iWrapMode)  Sets the wrap mode of a texture brush (required: #include <GDIP.au3>)
_GDIPlus_TextureTranslateTransform ($hTextureBrush, $nDX, $nDY[, $iOrder = 0])  Updates a texture brush's current transformation matrix with the product of itself and a translation matrix (required: #include <GDIP.au3>)